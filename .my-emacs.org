#+STARTIP: overview
#+results: output silent
* TODOS
  - Lookup the mark ring maybe rebind mark pop NOTE: check out helm markring
  - Check out magit and flycheck
  - Look into yasnippets
  - Check out Abbrevs package
  - Check out occur
  - Find a perminate setting for the the change in font size 
  - Consiter installing keyfreq for key logging in emacs
  - Change (org-babel-load-file (expand-file-name ".my-emacs.org")) to a keybinding like <f12>
  - Look into web-mode
  - Check out the reference cards in /usr/share/emacs/refcards
	- Check out corral
	- Check out [[http://tuhdo.github.io/helm-intro.html][helm]]
	- TODO write a better control lock mode!
	- check out mark-multiple
	- check out expand-region
	- check out move-text
   - Check out ioccur!
   - Fix the tab flop i just had

* Vars
	
** Ido
   Ido may be replaced by helm
   TODO: check out occur it may replace swiper
   READ this article https://www.masteringemacs.org/article/searching-buffers-occur-mode
   
   M-d Searches sub-Dirs too
   M-m Creates a new sub directory
   C-t Toggles RegExp matching 
   C-p toggles Prefix matching (if on matches by beginning rather that containing)
   NOTE you can customize a variable with M-x customize-variable RET variable-name-here
	 
   #+BEGIN_SRC emacs-lisp
     ;; (require 'ido)
     ;; (ido-mode t)
     ;; (setq ido-mode-enable-flex-matching t) ; Flexable matching
     ;; (setq ido-enable-regexp t)
     ;; (setq ido-everywhere t)
     ;; (setq ido-use-filename-at-point 'guess) ; Uses point to get context for file search
     ;; (setq ido-create-new-buffer 'always) ; Lets ido create new buffers without propmting
     ;; (setq ido-file-extensions-order '(".org" ".java" ".emacs")) ; Tells ido to show these file types first
     ;; (setq ido-ignore-extensions t) ; Tells ido to use completion-ignored-extensions variable for a list of file extensions to ignore

   #+END_SRC
   
** Interface tweaks
   Emacs standard settings
   
*** Remove menus and sidebars
		
    #+BEGIN_SRC emacs-lisp
      ;; Kill toolbar
      (tool-bar-mode -1)
      ;; Remove menubar
      (menu-bar-mode -1)
      ;; No scroll bars
      (scroll-bar-mode -1)

    #+END_SRC
    
    #+BEGIN_SRC emacs-lisp
      ;; calendar weeks start on monday!
      (setq calendar-week-start 1)

      ;; two space tabs
      (setq-default tab-width 2)
      (setq show-paren-delay 0) ; 0 delay for paren matching
      (show-paren-mode 1) ; Show matching paren

      ;; save place in files
      (save-place-mode 1)

      ;; Better word wrapping 1
      (toggle-word-wrap 1)

      ;; Turn on pair matching for brackets
      (electric-pair-mode)

      ;; save emacs sessions
      (desktop-save-mode 1)

      ;; Highlight the current line
      (global-hl-line-mode 1)

      ;; dont autosave files
      (setq desktop-auto-save-timeout nil)

      ;; Move things to the trash instead of destorying them
      (setq delete-by-moving-to-trash t)

      ;; Disable tool tips 
      (tooltip-mode -1)

      ;; Show tool tips in the mini buffer
      (setq tooltip-use-echo-area t)


      ;; Replace the annoying yes-or-no prompt with y-or-n
      (fset 'yes-or-no-p 'y-or-n-p)

      ;; (global-linum-mode 1) ; Show line numbers
      ;; (winner-mode 1) ; Lets you undo and redo window layout commands with C-x left/right
      ;; (windmove-default-keybindings) ; Lets you move around windows with SHIFT+up/right/down/left
      ;; (setq debug-on-error t) ; Tell emacs to debug on error

      (defalias 'list-buffers 'ibuffer) ; switch list-buffers to ibuffer

      ;; http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
      (setq backup-directory-alist `(("." . "~/.saves"))) ; Make a backups directory in ~/.saves

      ;; start the emacsclient -c for the terminal
      (server-start) 

      ;; Emacs exec-path
      (add-to-list 'exec-path "~/.bin")
      ;; (add-to-list 'load-path "~/.emacs.d/") ; Where emacs looks for files to load

    #+END_SRC

*** Adding languages to org-mode
		[[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][python]]

		#+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)))

		#+END_SRC
		
* Packages
	
** Use-package
   :init loads things before the package loads
   :config loads things after the package is loaded
	 
   # ** Eshell-manual
   #   Adds a manual for eshell to emacs!
   #   #+BEGIN_SRC emacs-lisp
   #      (use-package eshell-manual
   #        :ensure t)
   #   #+END_SRC
	 
** Themes
	 
   #+BEGIN_SRC emacs-lisp
     ;; (use-package color-theme-sanityinc-solarized
     ;;   :ensure t
     ;;   :config
     ;;   (load-theme 'sanityinc-solarized-dark t))

     (use-package zenburn-theme
       :ensure t
       :config
       (load-theme 'zenburn t))

     ;; (use-package monokai-theme
     ;;   :ensure t
     ;;   :config
     ;;   (load-theme 'monokai t))

   #+END_SRC
   
** Try
   Try is a package that allows you to try out Emacs packages without
   installing them.
	 
   #+BEGIN_SRC emacs-lisp 
     (use-package try
       :ensure t)

   #+END_SRC
   
** =Control-lock=
   Like caps-lock, but for your control key.  Give your pinky a rest!
	 
   #+BEGIN_SRC emacs-lisp 
     ;; (use-package control-lock
     ;;   :ensure t
     ;;   :bind
     ;;   ("C-." . control-lock-toggle)
     ;;   ("C-," . control-lock-toggle))

   #+END_SRC
   
** Lorem-ipsum
   This package provides convenience functions to insert dummy Latin
   text into a buffer.
   
   Default keybindings:
   
   C-c l p: lorem-ipsum-insert-paragraphs
   C-c l s: lorem-ipsum-insert-sentences
   C-c l l: lorem-ipsum-insert-list
   
   #+BEGIN_SRC emacs-lisp 
     (use-package lorem-ipsum
       :ensure t
       :config
       (lorem-ipsum-use-default-bindings))

   #+END_SRC
   
** Engine-mode
   The [[https://github.com/hrs/engine-mode][Github]] page has some nice examples. 
   The prefix key is C-x / <keybinding>
	 
   #+BEGIN_SRC emacs-lisp
     (use-package engine-mode
       :ensure t
       :config 
       (engine-mode t)
       (defengine duckduckgo
         "https://duckduckgo.com/?q=%s"
         :keybinding "d"))

   #+END_SRC

** =Swiper=
   TODO: think about useing helm for the extra support
   
   This package gives an overview of the current regex search
   candidates.  The search regex can be split into groups with a
   space.  Each group is highlighted with a different face.
   
   It can double as a quick `regex-builder', although only single
   lines will be matched.
	 
   #+BEGIN_SRC emacs-lisp 
     ;;  ;;; link to swiper/ivy docs http://oremacs.com/swiper/
     ;; (use-package swiper
     ;;   :ensure t
     ;;   :config
     ;;   (progn (ivy-mode 1)
     ;;          (setq ivy-use-virtual-buffers t)
     ;;          ;; (setq ivy-display-style 'fancy)
     ;;          (global-set-key "\C-s" 'swiper)
     ;;          (global-set-key (kbd "C-c C-r") 'ivy-resume)
     ;;          (global-set-key (kbd "<f6>") 'ivy-resume)
     ;;          (global-set-key (kbd "M-x") 'counsel-M-x)
     ;;          (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     ;;          (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     ;;          (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     ;;          (global-set-key (kbd "C-c g") 'counsel-git)
     ;;          (global-set-key (kbd "C-c j") 'counsel-git-grep)
     ;;          (global-set-key (kbd "C-c k") 'counsel-ag)
     ;;          (global-set-key (kbd "C-x l") 'counsel-locate)
     ;;          ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     ;;          (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

   #+END_SRC
   
** =Counsel=
   NOTE: This is mostly used as a dependancy for swiper
   Just call one of the interactive functions in this file to complete
   the corresponding thing using `ivy'.
   
   Currently available:
- Symbol completion for Elisp, Common Lisp, Python and Clojure.
- Describe fuctions for Elisp: function, variable, library, command, bindings, theme.
- Navigation functions: imenu, ace-line, semantic, outline
- Git utilities: git-files, git-grep, git-log, git-stash.
- Grep utitilies: grep, ag, pt, recoll.
- System utilities: process list, rhythmbox, linux-app.
- Many more.
	
  #+BEGIN_SRC emacs-lisp 
    ;;; required for swiper
    ;; (use-package counsel
    ;;   :ensure t)

  #+END_SRC
  
** Org-bullets
   Show bullets in org-mode as UTF-8 characters
   
   #+BEGIN_SRC emacs-lisp 
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

   #+END_SRC
   
** Company-mode
   A better autocomplete for emacs
   
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (company-mode))

   #+END_SRC
   
** Emmet-mode
   Make inserting html and css easy
   
   #+BEGIN_SRC emacs-lisp 
     (use-package emmet-mode
       :ensure t
       :config
       (progn
         (add-hook 'sgml-mode-hook 'emmet-mode) ; markup langs
         (add-hook 'html-mode-hook 'emmet-mode)
         (add-hook 'css-mode-hook 'emmet-mode)))

   #+END_SRC
   
** Web-mode
   
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t)
       ;; (add-hook 'html-mode-hook 'web-mode)

   #+END_SRC
   
** Which-key
	 
   #+BEGIN_SRC emacs-lisp
     ;;; Shows keybind while typeing commands
     (use-package which-key
       :ensure t
       :config
       (which-key-mode))

   #+END_SRC
   
** Beacon-mode
   Never lose my cursor again!
	 
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :config
       (beacon-mode))

   #+END_SRC
   
** Powerline
   information bar eye candy
	 
   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t
       :config
       (powerline-default-theme))

   #+END_SRC
   
** Helm
	 
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :bind
       ("M-x" . helm-M-x)
       ("C-x C-f" . helm-find-files))

     (with-eval-after-load "Ibuffer" 
       (defalias 'ibuffer-find-file 'helm-find-files))

     (defalias 'execute-extended-command 'helm-M-x)

   #+END_SRC

** Swiper-helm
	 
   #+BEGIN_SRC emacs-lisp
     (use-package swiper-helm
       :ensure t
       :bind
       ("C-s" . swiper-helm))

   #+END_SRC
   
** Ace-jump-mode
	 
   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-mode
       :ensure t
       :bind
       ("M-s" . ace-jump-mode))

   #+END_SRC
	 
** Erlang-mode
	 (add-hook 'erlang-mode-hook 'flycheck-mode)
	 
   #+BEGIN_SRC emacs-lisp
     (use-package erlang
       :ensure t)

   #+END_SRC

** Markdown-Mode

*** TODO ensure that this loads with markdown files!
	 
	 #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t)
        
	 #+END_SRC
* Custom elisp code
	
** Fix theming issues in the terminal
	 
   #+BEGIN_SRC emacs-lisp
     (defun on-after-init ()
       (set-face-background 'default "unspecified-bg" (selected-frame)))

     (if (not (window-system)) (add-hook 'window-setup-hook 'on-after-init))

   #+END_SRC
   
** A snippet for dealing with tabs
	 
   #+BEGIN_SRC emacs-lisp
     ;;; http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html
     (defun my-setup-indent (n)
       ;; java/c/c++
       (setq-local c-basic-offset n)
       ;; web development
       (setq-local coffee-tab-width n) ; coffeescript
       (setq-local javascript-indent-level n) ; javascript-mode
       (setq-local js-indent-level n) ; js-mode
       (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
       (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
       (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
       (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
       (setq-local css-indent-offset n) ; css-mode
       )

     (defun my-office-code-style ()
       (interactive)
       (message "Office code style!")
       ;; use tab instead of space
       (setq-local indent-tabs-mode nil)
       ;; indent 2 spaces width
       (my-setup-indent 2))

     (defun my-personal-code-style ()
       (interactive)
       (message "My personal code style!")
       ;; use space instead of tab
       (setq indent-tabs-mode nil)
       ;; indent 2 spaces width
       (my-setup-indent 2))

     ;;; prog-mode-hook requires emacs24+
     (add-hook 'prog-mode-hook 'my-personal-code-style)
     ;;; a few major-modes does NOT inherited from prog-mode
     (add-hook 'lua-mode-hook 'my-personal-code-style)
     (add-hook 'web-mode-hook 'my-personal-code-style)

   #+END_SRC
   
* Keybindings

  mastering emacs has a great [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][article on keybindings in emacs]]
	rebind C-S-<up/down/left/right> to resize windows
	renind <F1> to eshell
	note C-<return> is unbound in most modes
	Consiter swaping C-h, C-p
	maybe bind revert-buffer to something
	Super can be refered to in kbd as "s-?" ? being any key (NOTE the s is lowercase)
	Hyper can be refered to in kbd as "H-?" ^^
	TODO: bind swiper-all
  
	Super and hyper key bindings for windows
	(setq w32-apps-modifier 'hyper)
	(setq w32-lwindow-modifier 'super)
	(setq w32-rwindow-modifier 'hyper)
  
  #+BEGIN_SRC emacs-lisp
    ;;; Smex keybindings
    ;; (global-set-key (kbd "M-x") 'smex)
    ;; (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; (global-set-key (kbd "<escape>") 'control-lock-toggle)
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
    (global-set-key (kbd "M-o") 'other-window)
    ;; (global-set-key (kbd "C-p") 'help-command)
    ;; (global-set-key (kbd "C-h") 'previous-line)
    (global-set-key (kbd "<f1>") 'eshell)

    (global-set-key (kbd "M-p") 'backward-paragraph)
    (global-set-key (kbd "M-n") 'forward-paragraph)

    (global-set-key (kbd "C-x C-c") 'delete-frame)

    ;(define-key global-map (kbd "RET") 'newline-and-indent)

  #+END_SRC

* Notes to self

	C-x i: insert file at cursor location!
	C-x C-v: open alternative file
	C-x C-w: save file as
	tip: use refill-mode to keep text from 'wraping'
	or use auto-fill-mode
	M-q: fill-paragraph
	C-_ or C-x u: undo
	also try fill-region
	look into :repeate:
	M-{ or M-}: move by paragraph
	M-a or M-e: move by sentence
	C-x [ or C-x ]: move by page
	   -needs a page-delimiter
	C-q: quoted insert
	   -C-l: insert formfeed (page break)
	M-*n*: where *n* is a number that dictates how many times the command will be ran
	C-u: universal argument... by default its 4 times... if you do C-u C-u its 16 times!
	C-x C-x: swap point and mark
	M-h: mark paragraph
	C-x h: mark whole buffer
	C-x C-p: mark page
	edit the kill-ring-max var to set the max size of the kill ring to something other than 30
	C-t: transpose chracters
	M-t: transpose words
	C-x C-t: transpose lines
	M-c, M-l, M-u: cap, lowercase, upcase
	<insert>: enter overwrite-mode
	M-z: zap to character
	check out isearch and isearch-occur
	check out abbrev-mode (page 73 of the emacs book)
	commands prefixed with C-x 4 are for the other window
	commands prefixed with C-x 5 are for the other frame
	look at pages 90-93 for information on emacs buffer list
	C-x +: make windows equal size
	check out compare-windows
	C-x C--: resize font
	C-x r m: set a bookmark
	C-x r b: jump to bookmark
	c-x r l: list bookmarks
	   -other useful commands might be bookmark-rename, bookmark-delete, or just check out the bookmark-* commnds
	M-h: mark paragraph
	M-!: run command in shell
	M-|: shell command on region
	C-u M-!: run command and put output into buffer
	make a open shell command that opens a new shell and runs rename-uniquely on it
	think about editing the shell-file-name variable, or setting the env variables ESHELL and SHELL
	  -(setq shell-file-name "/bin/bash")
	  -- the startup file is .emacs_<shell name> aka .emacs_bash in my case (check out page 107)
	check out the variable dired-garbage-files-regexp (page 115) (see page 117 for a large list of commands)
	check out more on the calendar on page 125
	look at page 130 for more diary commands like showing the diary at startup! (also check to see if you can change the location of the file)

* Isearch/ commands!

Isearch Mode Bindings:
key             binding
---             -------

TAB .. C-j			isearch-printing-char
SPC .. ~				isearch-printing-char

C-g							isearch-abort
C-h							Prefix Command
RET							isearch-exit
C-q							isearch-quote-char
C-r							isearch-repeat-backward
C-s							isearch-repeat-forward
C-w							isearch-yank-word-or-char
C-x							Prefix Command
C-y							isearch-yank-kill
ESC							Prefix Command
C-\							isearch-toggle-input-method
C-^							isearch-toggle-specified-input-method
DEL							isearch-delete-char
S-SPC						isearch-printing-char
<f1>						Prefix Command
<help>					Prefix Command
<mouse-2>				isearch-mouse-2
<return>				isearch-exit
<xterm-paste>		isearch-xterm-paste

C-h C-h					isearch-help-for-help
C-h ?						isearch-help-for-help
C-h b						isearch-describe-bindings
C-h k						isearch-describe-key
C-h m						isearch-describe-mode
C-h q						help-quit
C-h <f1>				isearch-help-for-help
C-h <help>			isearch-help-for-help

C-x 8						Prefix Command

C-M-i						isearch-complete
C-M-r						isearch-repeat-backward
C-M-s						isearch-repeat-forward
C-M-w						isearch-del-char
C-M-y						isearch-yank-char
ESC ESC					Prefix Command
M-%							isearch-query-replace
M-c							isearch-toggle-case-fold
M-e							isearch-edit-string
M-n							isearch-ring-advance
M-p							isearch-ring-retreat
M-r							isearch-toggle-regexp
M-s							Prefix Command
M-y							isearch-yank-pop
C-M-%						isearch-query-replace-regexp

M-ESC ESC				isearch-cancel

M-s C-e					isearch-yank-line
M-s SPC					isearch-toggle-lax-whitespace
M-s '						isearch-toggle-char-fold
M-s _						isearch-toggle-symbol
M-s c						isearch-toggle-case-fold
M-s e						isearch-edit-string
M-s h						Prefix Command
M-s i						isearch-toggle-invisible
M-s o						isearch-occur
M-s r						isearch-toggle-regexp
M-s w						isearch-toggle-word

<f1> C-h				isearch-help-for-help
<f1> ?					isearch-help-for-help
<f1> b					isearch-describe-bindings
<f1> k					isearch-describe-key
<f1> m					isearch-describe-mode
<f1> q					help-quit
<f1> <f1>				isearch-help-for-help
<f1> <help>			isearch-help-for-help

<help> C-h			isearch-help-for-help
<help> ?				isearch-help-for-help
<help> b				isearch-describe-bindings
<help> k				isearch-describe-key
<help> m				isearch-describe-mode
<help> q				help-quit
<help> <f1>			isearch-help-for-help
<help> <help>		isearch-help-for-help

C-x 8 RET				isearch-char-by-name

M-s h r					isearch-highlight-regexp
Isearch Mode Bindings:
key             binding
---             -------

TAB .. C-j			isearch-printing-char
SPC .. ~				isearch-printing-char

C-g							isearch-abort
C-h							Prefix Command
RET							isearch-exit
C-q							isearch-quote-char
C-r							isearch-repeat-backward
C-s							isearch-repeat-forward
C-w							isearch-yank-word-or-char
C-x							Prefix Command
C-y							isearch-yank-kill
ESC							Prefix Command
C-\							isearch-toggle-input-method
C-^							isearch-toggle-specified-input-method
DEL							isearch-delete-char
S-SPC						isearch-printing-char
<f1>						Prefix Command
<help>					Prefix Command
<mouse-2>				isearch-mouse-2
<return>				isearch-exit
<xterm-paste>		isearch-xterm-paste

C-h C-h					isearch-help-for-help
C-h ?						isearch-help-for-help
C-h b						isearch-describe-bindings
C-h k						isearch-describe-key
C-h m						isearch-describe-mode
C-h q						help-quit
C-h <f1>				isearch-help-for-help
C-h <help>			isearch-help-for-help

C-x 8						Prefix Command

C-M-i						isearch-complete
C-M-r						isearch-repeat-backward
C-M-s						isearch-repeat-forward
C-M-w						isearch-del-char
C-M-y						isearch-yank-char
ESC ESC					Prefix Command
M-%							isearch-query-replace
M-c							isearch-toggle-case-fold
M-e							isearch-edit-string
M-n							isearch-ring-advance
M-p							isearch-ring-retreat
M-r							isearch-toggle-regexp
M-s							Prefix Command
M-y							isearch-yank-pop
C-M-%						isearch-query-replace-regexp

M-ESC ESC				isearch-cancel

M-s C-e					isearch-yank-line
M-s SPC					isearch-toggle-lax-whitespace
M-s '						isearch-toggle-char-fold
M-s _						isearch-toggle-symbol
M-s c						isearch-toggle-case-fold
M-s e						isearch-edit-string
M-s h						Prefix Command
M-s i						isearch-toggle-invisible
M-s o						isearch-occur
M-s r						isearch-toggle-regexp
M-s w						isearch-toggle-word

<f1> C-h				isearch-help-for-help
<f1> ?					isearch-help-for-help
<f1> b					isearch-describe-bindings
<f1> k					isearch-describe-key
<f1> m					isearch-describe-mode
<f1> q					help-quit
<f1> <f1>				isearch-help-for-help
<f1> <help>			isearch-help-for-help

<help> C-h			isearch-help-for-help
<help> ?				isearch-help-for-help
<help> b				isearch-describe-bindings
<help> k				isearch-describe-key
<help> m				isearch-describe-mode
<help> q				help-quit
<help> <f1>			isearch-help-for-help
<help> <help>		isearch-help-for-help

C-x 8 RET				isearch-char-by-name

M-s h r					isearch-highlight-regexp

